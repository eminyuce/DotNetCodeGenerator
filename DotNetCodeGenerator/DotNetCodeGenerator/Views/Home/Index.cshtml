@using DotNetCodeGenerator.Domain.Entities;
@using DotNetCodeGenerator.Domain.Helpers;
@model CodeGeneratorResult
@{
    ViewBag.Title = "Home Page";
    var emptyList = new List<SelectListItem>();
}


@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <h4>CodeGeneratorResult</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="form-group">
            @Html.LabelFor(model => model.ConnectionString, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.ConnectionString, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.ConnectionString, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.SelectedTable,
           htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-5">
                @Html.DropDownList("SelectedTable", emptyList, htmlAttributes: new { @class = "form-control" }) 
                @Html.ValidationMessageFor(model => model.SelectedTable, "", new { @class = "text-danger" })
            </div>
            <div class="col-md-5">
                <input type="button" id="RetrieveTables" value="Get Tables" />
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.ModifiedTableName, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.ModifiedTableName, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.ModifiedTableName, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.StringCodePattern, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.StringCodePattern, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.StringCodePattern, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.IsMethodStatic, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <div class="checkbox">
                    @Html.EditorFor(model => model.IsMethodStatic)
                    @Html.ValidationMessageFor(model => model.IsMethodStatic, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.StoredProcExec, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <textarea class="form-control text-box multi-line"
                          id="StoredProcExec"
                          name="StoredProcExec">
                    @Model.StoredProcExec
                    </textarea>
                @Html.ValidationMessageFor(model => model.StoredProcExec, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.StoredProcExecModel, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <textarea class="form-control text-box multi-line"
                          id="StoredProcExecModel"
                          name="StoredProcExecModel">
                    @Model.StoredProcExecModel
                    </textarea>

                @Html.ValidationMessageFor(model => model.StoredProcExecModel, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.StoredProcExecModelDataReader, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <textarea 
                          class="form-control text-box multi-line"
                           id="StoredProcExecModelDataReader"
                           name="StoredProcExecModelDataReader">@Model.StoredProcExecModelDataReader</textarea>
                @Html.ValidationMessageFor(model => model.StoredProcExecModelDataReader, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Generate Code" class="btn btn-default" />
            </div>
        </div>
    </div>
}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")

    <script>
      
      $(document).ready(function () {

          $("#RetrieveTables").click(function () {
              fillTables();
          });
          fillTables();
          function fillTables() {
              var postData = JSON.stringify({ "connectionString": $("#ConnectionString").val() });
              ajaxMethodCall(postData, "/Ajax/GetTables", function (data) {
                  var listitems = '';
                  $('#SelectedTable').find('option').remove();
                  $.each(data, function (i, item) {
                      listitems += '<option value=' + item.TableName + '>' + item.DatabaseTableName + '</option>';
                  });
                  $('#SelectedTable').append(listitems);
              });
          }
          $('#SelectedTable').on('change', function () {
              $('#ModifiedTableName').val(this.value);
          });

      });

    </script>
}
